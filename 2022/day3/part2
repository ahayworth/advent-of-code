#!/usr/bin/env ruby

# ARGF is a stream that reads from STDIN and from the files
# named on the command line. It is very, very useful.
rucksacks = ARGF
  .readlines
  # Yields an array like `['a', 'b', 'c', 'd']`
  .map { |line| line.chomp.chars }

total = 0
# We can iterate over each non-overlapping group of three rucksacks,
# and allow Ruby to destructure that group-of-groups into individual
# variables here.
rucksacks.each_slice(3) do |(rs1, rs2, rs3)|
  # Because Ruby arrays can behave like a set, we can find the common
  # types - the intersection - quite easily.
  commonalities = rs1 & rs2 & rs3

  # We should only have one commonality between each group of three
  # rucksacks, but that's only a promised property of our input - our
  # code does not actually guarantee that. So we program defensively
  # and iterate over a potential group of commonalities and find the
  # priorities of all of them for our total
  commonalities.each do |type|
    # To find the sum of the priorities, we can convert the "types"
    # to their integer codepoints and then subtract a constant.
    # However:
    #
    #   'A'.ord == 65
    #   'Z'.ord == 90
    #   'a'.ord == 97
    #   'z'.ord == 122
    #
    # There is a gap in the numbering (unlike our priority scheme),
    # and 'A' comes before 'a' (also unlike our priority scheme)
    # Darn you, ASCII! The easiest thing to do in my mind is just to
    # figure out if we're looking at an upper-case type or
    # lower-case type and then simply subtract a different constant
    # in each case.
    total += type.ord < 97 ? type.ord - 38 : type.ord - 96
  end
end

puts total
