#!/usr/bin/env ruby

# ARGF is a stream that reads from STDIN and from the files named on the command line.
assignments = ARGF
  .readlines
  # Yields `[["2-4", "6-8"], ...]
  .map { |line| line.chomp.split(',') }

# Transforms the assignment pairs into an array like:
#
#   `[[Range(2..4), Range(6..8)], ...]`
#
# We take advantage of some fun Ruby things:
# - The `Range` class, which is just incredibly convenient.
# - The magical "splat" operator: `*`. We use it here to convert
#   an array into method args: https://ruby-doc.com/3.1.3/syntax/calling_methods_rdoc.html#label-Array+to+Arguments+Conversion
assignments.map! do |pair|
  pair.map { |assgn| Range.new(*(assgn.split("-").map(&:to_i))) }
end

# We now need to count overlapping assignments as follows:
# - Is either assignment completely contained in the other?
# - Is either assignment partially contained in the other (even if
#   they just "touch" each other)?
# We can test the min/max of each range for inclusion in the other
# range to find out if either condition is satisfied.
result = assignments.count do |(a1, a2)|
  a1.minmax.any? { |n| a2.include?(n) } ||
  a2.minmax.any? { |n| a1.include?(n) }
end

# There are weird precedence things with code like:
#
#   puts assignments.count do |(a1, a2)|
#     ...
#   end
#
# Namely, it gets evaluated like `puts(assignments.count) do ...`,
# which wouldn't actually count correctly.
puts result
