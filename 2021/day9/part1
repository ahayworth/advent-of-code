#!/usr/bin/env ruby

map = []
File.read(ARGV[0] || "input").each_line do |row|
  map << row.chomp.split('').map(&:to_i)
end

low_points = []
map.each_with_index do |row, y|
  row.each_with_index do |loc, x|
    to_check = [
      [y, x + 1],
      [y, x - 1],
      [y + 1, x],
      [y - 1, x],
    ]

    # We need to filter out negative numbers, because
    # ruby allows for reverse-indexing from the end of the
    # array. We don't need to check for going past the end,
    # because that will be nil.
    to_check.reject! { |(y, x)| y < 0 || x < 0 }

    adjacents = to_check.map do |(y, x)|
      (map[y] || [])[x]
    end.compact

    low_points << loc unless adjacents.any? { |x| x <= loc }
  end
end

puts low_points.sum + low_points.size
